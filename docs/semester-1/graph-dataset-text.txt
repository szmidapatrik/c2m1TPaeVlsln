after successfully creating graph representations of the Inferno map, the next step before training a neural network was to create a dataset for it to be trained on. To achieve this, I needed to complete several steps first. First, for a graph neural network to work effectively, I needed to store the information about the nodes representing the map: the coordinates of it, and whether it is a node of a contact spot or a path. Secondly, I needed to extend this map graph by adding the players to it and also storing information about them. And last, I had to create diffeent graph for every different snapshot in the game; as a result, one graph would contain a state of a given game at a given time, including the map structure with the coordinates of the nodes representing it, the players on it and the nessessary informations about them (such as how many kills they have in the examined game so far, how many deaths they have, what kind of weapon do they use, etc.). Creating this graph for every state of the collected matches would give a massive grap dataset, allowing me to learn from it using graph neural networks.
After considering the task ahead, I realized I need to work with heterogeneous graphs. The difference between heterogeneous graphs and ordinary (or homogeneous) graphs is that in the latter, there is only 1 type of node and 1 type of edge. However, in the heterogeneous graphs, there can be different node types with different edges connecting them to one-another. This problem required heterogeneous graphs, because of the need for 2 types of nodes: one for representing the map, and another for representing the palyers on it. Since the map type of nodes only have 4 attributes (x,y and z coordinates, and whether the node is a contact spot or a path), and the players have a lot more than this (position, statistics from th actual game and overall performance describing metrics), hey would need a different kind of node representation. 
To create these heterogeneous graphs I used the Pytorch Geometric (PyG) package. this library allows the user to work with graphs: create datasets with graph structure, use graph neural networks to learn from them, etc. In this package, a graph's nodes can have features defined in a tensor, allowing me to store the attributes of the map nodes and the palyers in the nodes. I started the graph creation process by adding the map type nodes to PyG's HeteroData object, created purposely for storing heterogeneous graphs.

After successfully creating graph representations of the Inferno map to capture it's structure and layout, I started working on modelling actual game snapshots. The only thing missing from the map graph to achieve this were the nodes representing the players. My initial idea was to create different graphs for every snapshot by adding the player nodes to the graph at the position they are lcoated at the moment of the game, and connect them to the map node they are closest to. However, since there are 128 different game states happening in the time span of one second, I decided to create only 1 graph for each second instead of 128, because there is no need to capture and check every 128 frame of a second due to not much changes happening between them. To create the most accurate representation of a game state, I decided to use heterogeneous graphs. Heterogeneous (or knowledge) graphs are different from ordinary (or homogeneous) graphs because they can have more than 1 type of nodes and edges, which applies to my case, since I have map type nodes and player type nodes. The reason why this is nessessary is because these 2 type of nodes have different number of properties; the map type nodes only have 4 (x,y,z coordinates, and whether it is a contact spot or a path), while the nodes representing the palyers should hold more information about the palyers (positions, how many kills/deaths they have in the game, remaining health, carried weapon, overall performance describing metrics, etc.).
To create the first game state representation as a heterogeneous graph in a format that can be used later in graph learning I used Pytorch Geometric's (PyG for short) HeteroData object. I added the map nodes of Inferno as "map" type nodes, and stored its four property (the nodes coordinates and whether it is a contact spot or not) in the feture set tensor of the node. After this, I added the 10 player nodes to the map by getting 1 moment from the tabuar dataset collected of the games between 2022 and 2023, getting the data about the players (weapons, statistics, positions, health, etc.), and thn adding these nodes to the graph as "player" type nodes and setting these attributes as the nodes feature set tensor. Then I calculated the closest "map" type node to each player and added an edge to cennect them. I used a different king of edge to connec a "player" node to a "map" node, than what I used when connecting "map" node to another "map" node. I also added some graph level features to the graph such as the remaining time, players alive on each side and the score of the game. These graph level features are not related to any nodes or edges but the whole graph itself. As a result I had the first heterogeneous graph representation of a snapshot of the game. I proceeded to do this for the rest of every second of the matches palyed in 2023. As a result, I had a dataset of around 400 000 heterogeneous graphs.